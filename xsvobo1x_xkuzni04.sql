/* ******************************* xsvobo1x_xkuzni04.sql ****************************** *
 *                                Databázové systémy (IDS)                              *
 *                      Lucie Svobodová, xsvobo1x@stud.fit.vutbr.cz                     *
 *                        Jakub Kuzník, xkuzni04@stud.fit.vutbr.cz                      *
 *                                  FIT VUT 2021/2022                                   *
 *  *********************************************************************************** */

/* ******************************** ODSTRANĚNÍ TABULEK ******************************** */

DROP TABLE Platba;
DROP TABLE Objednavka_obsahuje_pokrm_napoj;
DROP TABLE Objednavka;
DROP TABLE Rezervace_stolu;
DROP TABLE Rezervace;
DROP TABLE Ingredience_v_pokrmu_napoji;
DROP TABLE Pokrm_napoj;
DROP TABLE Ingredience_obsahuje_alergen;
DROP TABLE Alergen;
DROP TABLE Ingredience;
DROP TABLE Telefon;
DROP TABLE Zamestnanec;
DROP TABLE Pozice;
DROP TABLE Zakaznik;
DROP TABLE Stul;
DROP TABLE Mistnost;

DROP TRIGGER Kontrola_casu_rezervace;

/* ******************************** VYTVOŘENÍ TABULEK ********************************* */

CREATE TABLE Mistnost (
    cislo_mistnosti         NUMBER GENERATED BY DEFAULT AS IDENTITY,
    nazev                   VARCHAR(128),
    kapacita                SMALLINT CHECK (kapacita>0),
    CONSTRAINT PK_mistnost  PRIMARY KEY (cislo_mistnosti)
);

CREATE TABLE Stul (
    cislo_stolu       NUMERIC(3,0),
    cislo_mistnosti   NUMBER,
    pocet_mist        SMALLINT DEFAULT '4',
    CONSTRAINT PK_stul_mistnost PRIMARY KEY (cislo_stolu, cislo_mistnosti),
    CONSTRAINT FK_stul_mistnost FOREIGN KEY (cislo_mistnosti) REFERENCES Mistnost
);

CREATE TABLE Zakaznik (
    ID_zakaznik     NUMBER GENERATED ALWAYS as IDENTITY(START with 1 INCREMENT by 1),
    jmeno           VARCHAR(32) NOT NULL,
    prijmeni        VARCHAR(32) NOT NULL,
    telefon         VARCHAR(16) NOT NULL CONSTRAINT zakaznik_telefon_format CHECK (LENGTH(telefon) = 9),
    email           VARCHAR(64) CONSTRAINT email_format CHECK (REGEXP_LIKE (email, '^\w+(\.\w+)*@\w+(\.\w+)+$')),
    CONSTRAINT PK_zakaznik PRIMARY KEY (ID_zakaznik)
);

CREATE TABLE Pozice (
    zkratka_pozice VARCHAR(8),
    nazev_pozice   VARCHAR(255) UNIQUE NOT NULL,
    CONSTRAINT PK_pozice PRIMARY KEY (zkratka_pozice)
);

CREATE TABLE Zamestnanec (
    ID_zamestnanec  NUMBER GENERATED ALWAYS as IDENTITY(START with 1 INCREMENT by 1),
    zkratka_pozice  VARCHAR(8)    NOT NULL,
    jmeno           VARCHAR(32)    NOT NULL,
    prijmeni        VARCHAR(32)    NOT NULL,
    rodne_cislo     VARCHAR(16)    NOT NULL   UNIQUE      /* zadáváno bez lomítka */
                         CONSTRAINT rc_format  CHECK (REGEXP_LIKE (rodne_cislo, '^(\d{9}|\d{10})$')
                                                AND (MOD(TO_NUMBER(rodne_cislo), 11) = 0)),
    bankovni_ucet   VARCHAR(64)    NOT NULL
                        CONSTRAINT bank_format CHECK (REGEXP_LIKE (bankovni_ucet, '^\d+-?\d*\/\d{4}$')
                                                AND LENGTH(bankovni_ucet) > 6 AND LENGTH(bankovni_ucet) < 23),
    adresa          VARCHAR(255),
    CONSTRAINT PK_zamestnanec PRIMARY KEY (ID_zamestnanec),
    CONSTRAINT FK_pozice      FOREIGN KEY (zkratka_pozice) REFERENCES Pozice
);

CREATE TABLE Telefon (
    poradove_cislo  NUMERIC(2,0)  DEFAULT '1',
    ID_zamestnanec  NUMBER        NOT NULL,
    telefon         VARCHAR(16)   NOT NULL  CONSTRAINT telefon_format CHECK (LENGTH(telefon) = 9),
    CONSTRAINT PK_telefon_zamestnanec  PRIMARY KEY (poradove_cislo, ID_zamestnanec),
    CONSTRAINT FK_tel_zamestnanec      FOREIGN KEY (ID_zamestnanec) REFERENCES Zamestnanec
);

CREATE TABLE Ingredience (
    ID_ingredience  NUMBER GENERATED ALWAYS as IDENTITY,
    nazev           VARCHAR(255) NOT NULL,
    CONSTRAINT PK_ingredience PRIMARY KEY (ID_ingredience)
);

CREATE TABLE Alergen (
    ID_alergen      NUMERIC(2, 0),
    nazev           varchar(32) NOT NULL,
    CONSTRAINT PK_alergen PRIMARY KEY (ID_alergen)
);

CREATE TABLE Ingredience_obsahuje_alergen (
    ID_ingredience  NUMBER NOT NULL,
    ID_alergen      NUMBER NOT NULL,
    CONSTRAINT PK_inal PRIMARY KEY (ID_Ingredience, ID_alergen),
    CONSTRAINT FK_inal_ingredience FOREIGN KEY (ID_ingredience) REFERENCES Ingredience,
    CONSTRAINT FK_inal_alergen     FOREIGN KEY (ID_alergen)     REFERENCES Alergen
);

/* Generalizace/specializace:
                                        Pokrm_napoj
                                             △
                                          ___|___
                                         |       |
                                       Pokrm    Napoj

   Zvolili jsme způsob reprezentace pomocí jedné tabulky (Pokrm_napoj) pro obě
   specializace, protože specializace Pokrm a Napoj jsou disjunktní a totální.
*/
CREATE TABLE Pokrm_napoj (
    ID_pokrm_napoj  NUMBER GENERATED ALWAYS as IDENTITY,
    nazev           VARCHAR(255) NOT NULL,
    typ             VARCHAR(8)   DEFAULT 'pokrm' NOT NULL
                        CONSTRAINT pokrm_napoj_typ CHECK (typ IN ('pokrm', 'nápoj')),
    doba_pripravy   VARCHAR(16),
    hmotnost_gram   INT CHECK (hmotnost_gram > 0),
    obsah_alkoholu  NUMERIC(5, 2) CHECK (obsah_alkoholu >= 0.0),
    objem_ml        INT CHECK (objem_ml > 0),
    cena            INT NOT NULL CHECK (cena > 0),
    CONSTRAINT PK_pokrm_napoj PRIMARY KEY (ID_pokrm_napoj)
);

CREATE TABLE Ingredience_v_pokrmu_napoji (
    ID_pokrm_napoj  NUMBER NOT NULL,
    ID_ingredience  NUMBER NOT NULL,
    mnozstvi        INT CHECK (mnozstvi > 0),
    CONSTRAINT PK_invpn PRIMARY KEY (ID_pokrm_napoj, ID_ingredience),
    CONSTRAINT FK_invpn_pokrm_napoj FOREIGN KEY (ID_pokrm_napoj) REFERENCES Pokrm_napoj,
    CONSTRAINT FK_invpn_ingredience FOREIGN KEY (ID_ingredience) REFERENCES Ingredience
);

CREATE TABLE Rezervace (
    ID_rezervace            NUMBER GENERATED ALWAYS as IDENTITY,
    ID_zamestnanec          NUMBER          NOT NULL,
    ID_zakaznik             NUMBER          NOT NULL,
    datum_rezervace         DATE            DEFAULT ON NULL CURRENT_DATE,
    cas_rezervace           INTERVAL DAY TO SECOND DEFAULT ON NULL INTERVAL '18:00' HOUR TO MINUTE,
    datum_cas_vytvoreni     TIMESTAMP       DEFAULT ON NULL CURRENT_TIMESTAMP,
    CONSTRAINT PK_rezervace       PRIMARY KEY (ID_rezervace),
    CONSTRAINT FK_rez_zamestnanec FOREIGN KEY (ID_zamestnanec) REFERENCES Zamestnanec,
    CONSTRAINT FK_rez_zakaznik    FOREIGN KEY (ID_zakaznik)    REFERENCES Zakaznik
);

CREATE TABLE Rezervace_stolu (
    cislo_stolu     NUMERIC(3,0)   NOT NULL,
    cislo_mistnosti NUMBER         NOT NULL,
    ID_rezervace    NUMBER         NOT NULL,
    CONSTRAINT PK_rezstolu PRIMARY KEY (cislo_stolu, cislo_mistnosti, ID_rezervace),
    CONSTRAINT FK_rezstolu_stul_mistnost    FOREIGN KEY (cislo_stolu, cislo_mistnosti)  REFERENCES Stul,
    CONSTRAINT FK_rezstolu_rezervace        FOREIGN KEY (ID_rezervace) REFERENCES Rezervace
);

CREATE TABLE Objednavka (
    ID_objednavka           NUMBER GENERATED ALWAYS as IDENTITY,
    ID_rezervace            NUMBER,
    ID_zamestnanec          NUMBER      NOT NULL,
    ID_zakaznik             NUMBER      NOT NULL,
    datum_cas_vytvoreni     TIMESTAMP   DEFAULT ON NULL CURRENT_TIMESTAMP,
    CONSTRAINT PK_objednavka      PRIMARY KEY (ID_objednavka),
    CONSTRAINT FK_obj_rezervace   FOREIGN KEY (ID_rezervace)   REFERENCES Rezervace,
    CONSTRAINT FK_obj_zamestnanec FOREIGN KEY (ID_zamestnanec) REFERENCES Zamestnanec,
    CONSTRAINT FK_obj_zakaznik    FOREIGN KEY (ID_zakaznik)    REFERENCES Zakaznik
);

CREATE TABLE Objednavka_obsahuje_pokrm_napoj (
    ID_objednavka  NUMBER    NOT NULL,
    ID_pokrm_napoj NUMBER    NOT NULL,
    pocet          NUMBER    DEFAULT ON NULL '1' CHECK (pocet >= 1),
    CONSTRAINT PK_objpn PRIMARY KEY (ID_objednavka, ID_pokrm_napoj),
    CONSTRAINT FK_objpn_pokrm_napoj FOREIGN KEY (ID_pokrm_napoj) REFERENCES Pokrm_napoj,
    CONSTRAINT FK_objpn_objednavka  FOREIGN KEY (ID_objednavka)  REFERENCES Objednavka
);

CREATE TABLE Platba (
    ID_platba       NUMBER GENERATED ALWAYS as IDENTITY,
    ID_zamestnanec  NUMBER          NOT NULL,
    ID_objednavka   NUMBER          NOT NULL,
    castka          INT             NOT NULL CHECK (castka > 0),
    datum_a_cas     TIMESTAMP       DEFAULT ON NULL CURRENT_TIMESTAMP,
    typ_platby      VARCHAR(64)     NOT NULL CHECK (typ_platby IN ('hotovost', 'platební karta')),
    CONSTRAINT PK_platba           PRIMARY KEY (ID_platba),
    CONSTRAINT FK_plat_zamestnanec FOREIGN KEY (ID_zamestnanec) REFERENCES Zamestnanec,
    CONSTRAINT FK_plat_objednavka  FOREIGN KEY (ID_objednavka)  REFERENCES Objednavka
);


/* ************************* NAPLNĚNÍ TABULEK UKÁZKOVÝMI DATY ************************* */

INSERT INTO Mistnost (nazev, kapacita)
VALUES ('Hlavni sal', 60);
INSERT INTO Mistnost (nazev, kapacita)
VALUES ('Malý salónek - 1. patro', 30);
INSERT INTO Mistnost
VALUES (DEFAULT, 'Snidane', 20);

INSERT INTO Stul
VALUES (1, 1, '6');
INSERT INTO Stul
VALUES (2, 1, '6');
INSERT INTO Stul
VALUES (1, 2, '2');
INSERT INTO Stul
VALUES (1, 3, '10');
INSERT INTO Stul (cislo_stolu, cislo_mistnosti)
VALUES (3, 1);
INSERT INTO Stul (cislo_stolu, cislo_mistnosti)
VALUES (4, 1);

INSERT INTO Zakaznik (jmeno, prijmeni, telefon, email)
VALUES('Jan', 'Novák', '746358404', 'novak12@gmail.com');
INSERT INTO Zakaznik (jmeno, prijmeni, telefon, email)
VALUES('Marie', 'Mrtvá', '743689432', 'marus@centrum.cz');
INSERT INTO Zakaznik (jmeno, prijmeni, telefon, email)
VALUES('Martina', 'Březová', '765467897', 'martina.brezova@seznam.cz');
INSERT INTO Zakaznik (jmeno, prijmeni, telefon, email)
VALUES('Tomáš', 'Suchý', '777456654', 'tom.suchy1@gmail.com');

INSERT INTO Pozice
VALUES('cis', 'číšník');
INSERT INTO Pozice
VALUES('kuch', 'kuchař');
INSERT INTO Pozice
VALUES('rec', 'recepční');

INSERT INTO Zamestnanec (zkratka_pozice, jmeno, prijmeni, rodne_cislo, bankovni_ucet, adresa)
VALUES ('cis', 'Luboš', 'Veverka', '6704217795', '1234567944/6210', 'Újezdská 6/17, 91881 Rosice');
INSERT INTO Zamestnanec (zkratka_pozice, jmeno, prijmeni, rodne_cislo, bankovni_ucet, adresa)
VALUES ('kuch', 'Josef', 'Franek', '9205272879', '42/2000', 'K Březince 3/756, 60200 Brno');
INSERT INTO Zamestnanec (zkratka_pozice, jmeno, prijmeni, rodne_cislo, bankovni_ucet, adresa)
VALUES ('cis', 'Sabina', 'Antošová', '9353148805', '523443-684877125/0200', 'Jenská 15, 327 33 Ostrava');
INSERT INTO Zamestnanec (zkratka_pozice, jmeno, prijmeni, rodne_cislo, bankovni_ucet, adresa)
VALUES ('rec', 'Michaela', 'Kárová', '8660010656', '357698-9775654567/6210', 'Klatovská 39/269, 61300 Brno');

INSERT INTO Telefon (ID_zamestnanec, telefon)
VALUES (1, '746358074');
INSERT INTO Telefon (poradove_cislo, ID_zamestnanec, telefon)
VALUES (2, 1, '778875633');
INSERT INTO Telefon (ID_zamestnanec, telefon)
VALUES (2, '733725392');
INSERT INTO Telefon (ID_zamestnanec, telefon)
VALUES (3, '628342805');

INSERT INTO Ingredience (nazev)
VALUES ('vejce');
INSERT INTO Ingredience (nazev)
VALUES ('plnotučné mléko');
INSERT INTO Ingredience (nazev)
VALUES ('kuřecí prsa');
INSERT INTO Ingredience (nazev)
VALUES ('hovězí bok');
INSERT INTO Ingredience (nazev)
VALUES ('mouka pšeničná hladká');

INSERT INTO Alergen
VALUES (1, 'OBILOVINY OBSAHUJÍCÍ LEPEK');
INSERT INTO Alergen
VALUES (2, 'KORÝŠI');
INSERT INTO Alergen
VALUES (3, 'VEJCE');
INSERT INTO Alergen
VALUES (7, 'MLÉKO');

INSERT INTO Ingredience_obsahuje_alergen
VALUES (1, 3);
INSERT INTO Ingredience_obsahuje_alergen
VALUES (5, 1);
INSERT INTO Ingredience_obsahuje_alergen
VALUES (2, 7);

INSERT INTO Pokrm_napoj (nazev, doba_pripravy, hmotnost_gram, cena)
VALUES ('Kuřátko supreme s jasmínovou rýží, restovaným cukrovým hráškem a baby karotkou na sezamovém oleji', '35 minut', 200, 268);
INSERT INTO Pokrm_napoj (nazev, doba_pripravy, hmotnost_gram, cena)
VALUES ('Cheesecake z bílé čokolády', '5 minut', NULL, 129);
INSERT INTO Pokrm_napoj (nazev, typ, obsah_alkoholu, objem_ml, cena)
VALUES ('Domácí třešňová limonáda', 'nápoj', 0, 400, 65);
INSERT INTO Pokrm_napoj (nazev, typ, obsah_alkoholu, objem_ml, cena)
VALUES ('Cappuccino', 'nápoj', 0, NULL, 59);

INSERT INTO Ingredience_v_pokrmu_napoji (ID_pokrm_napoj, ID_ingredience, mnozstvi)
VALUES (1, 3, 150);
INSERT INTO Ingredience_v_pokrmu_napoji (ID_pokrm_napoj, ID_ingredience, mnozstvi)
VALUES (2, 5, 100);
INSERT INTO Ingredience_v_pokrmu_napoji (ID_pokrm_napoj, ID_ingredience, mnozstvi)
VALUES (2, 1, 4);
INSERT INTO Ingredience_v_pokrmu_napoji (ID_pokrm_napoj, ID_ingredience, mnozstvi)
VALUES (4, 2, 120);
INSERT INTO Ingredience_v_pokrmu_napoji (ID_pokrm_napoj, ID_ingredience, mnozstvi)
VALUES (2, 2, 100);

INSERT INTO Rezervace (ID_zamestnanec, ID_zakaznik, datum_rezervace, cas_rezervace)
VALUES (1, 1, TO_DATE('25.03.2022', 'DD.MM.YYYY'), DEFAULT);
INSERT INTO Rezervace (ID_zamestnanec, ID_zakaznik, datum_rezervace, cas_rezervace)
VALUES (1, 1, TO_DATE('27.03.2022', 'DD.MM.YYYY'), INTERVAL '20:00' HOUR TO MINUTE);
INSERT INTO Rezervace (ID_zamestnanec, ID_zakaznik, datum_rezervace, cas_rezervace)
VALUES (3, 2, TO_DATE('27.03.2022', 'DD.MM.YYYY'), INTERVAL '20:00' HOUR TO MINUTE);

INSERT INTO Rezervace_stolu (cislo_stolu, cislo_mistnosti, ID_rezervace)
VALUES (2, 1, 2);
INSERT INTO Rezervace_stolu (cislo_stolu, cislo_mistnosti, ID_rezervace)
VALUES (4, 1, 2);

INSERT INTO Objednavka (ID_zamestnanec, ID_zakaznik)
VALUES (1, 1);
INSERT INTO Objednavka (ID_rezervace, ID_zamestnanec, ID_zakaznik)
VALUES (1, 1, 2);
INSERT INTO Objednavka (ID_zamestnanec, ID_zakaznik)
VALUES (3, 3);
INSERT INTO Objednavka (ID_zamestnanec, ID_zakaznik)
VALUES (3, 4);

INSERT INTO Objednavka_obsahuje_pokrm_napoj (ID_pokrm_napoj, ID_objednavka, pocet)
VALUES (2, 3, 4);
INSERT INTO Objednavka_obsahuje_pokrm_napoj (ID_pokrm_napoj, ID_objednavka, pocet)
VALUES (2, 1, 4);
INSERT INTO Objednavka_obsahuje_pokrm_napoj (ID_pokrm_napoj, ID_objednavka)
VALUES (2, 2);
INSERT INTO Objednavka_obsahuje_pokrm_napoj (ID_pokrm_napoj, ID_objednavka)
VALUES (4, 2);
INSERT INTO Objednavka_obsahuje_pokrm_napoj (ID_pokrm_napoj, ID_objednavka, pocet)
VALUES (1, 3, 2);

INSERT INTO Platba (ID_zamestnanec, ID_objednavka, castka, typ_platby)
VALUES (1, 1, 775, 'platební karta');
INSERT INTO Platba (ID_zamestnanec, ID_objednavka, castka, typ_platby)
VALUES (1, 1, 35, 'platební karta');
INSERT INTO Platba (ID_zamestnanec, ID_objednavka, castka, typ_platby)
VALUES (2, 3, 256, 'hotovost');


/* ************************************** DOTAZY ************************************** */

/* Dotaz zobrazí alergeny obsažené v jednotlivých pokrmech/nápojích. *
 * - spojení většího počtu tabulek                                   */
SELECT P.nazev pokrm, A.nazev alergen
FROM Pokrm_napoj P, Ingredience_v_pokrmu_napoji IvP, Ingredience_obsahuje_alergen IoA, Alergen A
WHERE IvP.ID_ingredience = IoA.ID_ingredience AND IoA.ID_alergen = A.ID_alergen
        AND P.ID_pokrm_napoj = IvP.ID_pokrm_napoj
ORDER BY P.nazev;

/* Dotaz zobrazí počet rezervací jednotlivých zákazníků. *
 * - klauzule GROUP BY s použitím agregační funkce COUNT */
SELECT Z.ID_zakaznik, Z.jmeno, Z.prijmeni, COUNT(R.ID_zakaznik) pocet_rezervaci
FROM Rezervace R, Zakaznik Z
WHERE R.ID_zakaznik = Z.ID_zakaznik
GROUP BY Z.ID_zakaznik, Z.jmeno, Z.prijmeni
ORDER BY Z.ID_zakaznik;

/* Dotaz zobrazí celkovou částku zaplacenou za jednotlivé objednávky, které již byly zaplaceny.  *
 * (systém umožňuje zaplatit jednu objednávku více platbami)                                     *
 * - klauzule GROUP BY s použitím agregační funkce SUM                                           */
SELECT O.ID_objednavka, SUM(P.castka) zaplacena_castka
FROM Objednavka O, Platba P
WHERE P.ID_objednavka = O.ID_objednavka
GROUP BY O.ID_objednavka
ORDER BY O.ID_objednavka;

/* Dotaz zobrazí zákazníky, kteří nemají vytvořenou rezervaci, ale mají pouze objednávku. *
 * - použití predikátu EXISTS                                                             */
SELECT DISTINCT Z.*
FROM Zakaznik Z, Objednavka O
WHERE Z.ID_zakaznik = O.ID_zakaznik
AND NOT EXISTS (SELECT *
                FROM Rezervace R
                WHERE Z.ID_zakaznik = R.ID_zakaznik)
ORDER BY Z.ID_zakaznik;

/* Dotaz zobrazí veškeré telefony jednotlivých zaměstnanců, kteří jsou kuchaři *
 * - spojení tří tabulek                                                       */
SELECT Z.ID_zamestnanec, Z.jmeno, Z.prijmeni, TE.telefon
FROM Zamestnanec Z, Telefon TE, Pozice Po
WHERE TE.ID_zamestnanec = Z.ID_zamestnanec
      AND Z.zkratka_pozice='kuch' AND Po.zkratka_pozice = Z.zkratka_pozice
ORDER BY Z.ID_zamestnanec;

/* Dotaz zobrazí jméno a příjmení zaměstnance, který provedl rezervaci dne 27. 3. 2022. *
 * - spojení dvou tabulek                                                               */
SELECT Z.jmeno, Z.prijmeni, R.ID_rezervace
FROM Zamestnanec Z, Rezervace R
WHERE Z.ID_zamestnanec = R.ID_zamestnanec
      AND R.datum_rezervace = TO_DATE('27.03.2022', 'DD.MM.YYYY')
ORDER BY R.ID_rezervace;

/* Dotaz zobrazí místnosti, které neobsahují žádné stoly pro 2 osoby. *
 * - použití predikátu IN s vnořeným SELECTEM                         */
SELECT DISTINCT M.cislo_mistnosti, M.nazev nazev_mistnosti
FROM Stul S, Mistnost M
WHERE S.cislo_mistnosti = M.cislo_mistnosti
      AND M.cislo_mistnosti NOT IN (SELECT M.cislo_mistnosti
                                    FROM Mistnost M, Stul S
                                    WHERE M.cislo_mistnosti = S.cislo_mistnosti
                                    AND S.pocet_mist = 2)
ORDER BY M.cislo_mistnosti;


/* ************************************* PROCEDURY ************************************ */

/* Procedura na výstup vypíše za zadanou objednávku účtenku (názvy objednaných jídel, *
 * jejich počet, jednotlivé ceny a celkovou cenu).                                    */
CREATE OR REPLACE PROCEDURE Uctenka(ID IN INT)
IS
    -- kurzor pro procházení pokrmů v objednávce se zadaným ID
    CURSOR pokrmy IS   SELECT P.ID_pokrm_napoj, OoP.pocet, P.nazev, P.cena
                        FROM Objednavka_obsahuje_pokrm_napoj OoP, Pokrm_napoj P
                        WHERE OoP.ID_pokrm_napoj = P.ID_pokrm_napoj AND ID_Objednavka = ID;
    -- právě načtený záznam
    zaznam_pokrmu pokrmy%ROWTYPE;
    -- celková cena objednávky
    celkova_cena NUMBER;
    -- cena za právě načtený pokrm
    cena_za_jidlo NUMBER;
    -- délka názvu pokrmu (použito pro zarovnání výpisu)
    delka_nazvu NUMBER;
BEGIN
    -- tisk hlavičky účtenky
    DBMS_OUTPUT.PUT_LINE('ID objednávky: ' || ID);
    DBMS_OUTPUT.PUT_LINE('-----------------------------------------');
    celkova_cena := 0;
    -- procházení záznamů
    OPEN pokrmy;
    LOOP
        -- načtení jednoho záznamu
        FETCH pokrmy INTO zaznam_pokrmu;
        
        -- ukončovací podmínka
        EXIT WHEN pokrmy%NOTFOUND;
        
        -- výpočet celkové ceny za daný pokrm (cena * počet)
        cena_za_jidlo := zaznam_pokrmu.cena * zaznam_pokrmu.pocet;
        -- přičtení k celkové ceně objednávky
        celkova_cena := celkova_cena + cena_za_jidlo;
        
        -- výpis informací o daném pokrmu
        -- výpis názvu
        DBMS_OUTPUT.PUT(SUBSTR(zaznam_pokrmu.nazev, 1, 35));
        -- vložení mezer kvůli zarovnání
        delka_nazvu := LENGTH(zaznam_pokrmu.nazev);
        IF delka_nazvu < 35 THEN
            FOR i IN 1..(35-delka_nazvu) LOOP
                DBMS_OUTPUT.PUT(' ');
            END LOOP;
        END IF;
        
        -- vložení celkové ceny za pokrm
        DBMS_OUTPUT.PUT_LINE('  ' || cena_za_jidlo);
        
        -- výpis počtu x jednotková cena
        DBMS_OUTPUT.PUT_LINE('    ' || zaznam_pokrmu.pocet  || 'x  ' || zaznam_pokrmu.cena);
    END LOOP;
    CLOSE pokrmy;
    
    -- výpis celkové ceny objednávky
    DBMS_OUTPUT.PUT_LINE('-----------------------------------------');
    DBMS_OUTPUT.PUT_LINE('Celkem:                          ' || celkova_cena || ' Kč');
    
    EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20220, 'Chyba při tisku účtenky.');
END;
/

/* Ukázka použití procedury Uctenka() */
CALL Uctenka(3);


/* Procedura vypíše na výstup informaci o procentu objednávek vytvořených zaměstnancem  *
 * se zadaným ID. Pokud zaměstnanec nepracuje na pozici číšníka (a tedy nemůže vytvářet *
 * objednávky), je na výstup tato informace vypsána.                                    */
CREATE OR REPLACE PROCEDURE Vykonnost_zamestnance (ID IN INT)
IS
    -- kurzor pro načtení záznamu zaměstnance s ID
    CURSOR zam IS SELECT * FROM Zamestnanec WHERE ID_zamestnanec = ID;
    -- kurzor pro procházení všech objednávek
    CURSOR objednavky IS SELECT O.*, Z.jmeno, Z.prijmeni FROM Objednavka O, Zamestnanec Z WHERE O.ID_zamestnanec = Z.ID_zamestnanec;
    -- právě načtená objednávka
    zaznam_objednavky objednavky%ROWTYPE;
    -- hledaný zamestnanec
    hledany_zamestnanec zam%ROWTYPE;
    -- celkový počet objednávek
    celkem_objednavek INT;
    -- počet objednávek vytvořených hledaným zaměstnancem
    zamestnanec_objednavek INT;
    -- výjimka - zaměstnanec nebyl nalezen
    ZAMESTNANEC_NENALEZEN EXCEPTION;
    PRAGMA EXCEPTION_INIT(ZAMESTNANEC_NENALEZEN, -20033);
    -- výjimka - zaměstnanec není číšník (nemůže tedy vytvářet objednávky)
    NENI_CISNIK EXCEPTION;
    PRAGMA EXCEPTION_INIT(NENI_CISNIK, -20034);
BEGIN
    -- načtení zaměstnance s ID = ID do proměnné hledany_zamestnanec
    OPEN zam;
    FETCH zam INTO hledany_zamestnanec;
    IF zam%NOTFOUND THEN
        CLOSE zam;
        RAISE ZAMESTNANEC_NENALEZEN;
    END IF;
    CLOSE zam;
    
    -- pokud zaměstnanec nepracuje na pozici číšníka ('cis'), nemůže vytvářet objednávky
    IF hledany_zamestnanec.zkratka_pozice != 'cis' THEN
        RAISE NENI_CISNIK;
    END IF;
    
    -- počítání vytvořených objednávek
    celkem_objednavek := 0;
    zamestnanec_objednavek := 0;
    OPEN objednavky;
    LOOP
        FETCH objednavky INTO zaznam_objednavky;
        EXIT WHEN objednavky%NOTFOUND;
        celkem_objednavek := celkem_objednavek + 1;
        IF zaznam_objednavky.ID_zamestnanec = ID THEN
            zamestnanec_objednavek := zamestnanec_objednavek + 1;
        END IF;
    END LOOP;
    CLOSE objednavky;
    
    -- výpis informací o zaměstnanci
    DBMS_OUTPUT.PUT('Procento objednávek vytvořených zaměstnancem ' || hledany_zamestnanec.jmeno 
                            || ' ' || hledany_zamestnanec.prijmeni || ' (ID=' || ID || '): ');
    DBMS_OUTPUT.PUT_LINE((zamestnanec_objednavek/celkem_objednavek) * 100 || '%');
    
    -- ošetření výjimek
    EXCEPTION
        WHEN NENI_CISNIK THEN
            DBMS_OUTPUT.PUT_LINE('Zaměstnanec ' || hledany_zamestnanec.jmeno || ' ' || hledany_zamestnanec.prijmeni
                                || ' (ID=' || ID || ') nepracuje na pozici číšníka.');
        WHEN ZERO_DIVIDE THEN
            DBMS_OUTPUT.PUT_LINE('Nebyla nalezena žádná objednávka.');
        WHEN ZAMESTNANEC_NENALEZEN THEN
            DBMS_OUTPUT.PUT_LINE('Zaměstnanec s ID=' || ID || ' nebyl nalezen.');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20022, 'Chyba při provádění procedury.');
END;
/

/* Ukázka použití procedury Vykonnost_zamestnance() */
-- vypíše procento vytvořených objednávek
CALL Vykonnost_zamestnance(1);  
-- zaměstnanec, který nepracuje na pozici číšníka
CALL Vykonnost_zamestnance(2);  
-- zaměstnanec, který neexistuje
CALL Vykonnost_zamestnance(8);  


/* ************************************* TRIGGERY ************************************* */

/* Trigger přidá záznam do tabulky Zmeny_castek_plateb v případě změny částky provedené platby . */
-- vytvoření tabulky pro ukládání informací o změnách
DROP TABLE Zmeny_castek_plateb;
CREATE TABLE Zmeny_castek_plateb (
    uzivatel        VARCHAR(30), 
    datum           DATE,
    ID_platba       NUMBER,
    stara_castka    NUMBER, 
    nova_castka     NUMBER
);

-- vytvoření triggeru
CREATE OR REPLACE TRIGGER Zmena_platby
AFTER UPDATE OR DELETE OF castka ON Platba
FOR EACH ROW
BEGIN
    -- vlozeni zaznamu o zmene platby do tabulky Zmeny_caste_plateb
    INSERT INTO Zmeny_castek_plateb(uzivatel, datum, ID_platba, stara_castka, nova_castka)
    VALUES (USER(), SYSDATE, :OLD.ID_platba, :OLD.castka, :NEW.castka);
END;
/

/* Předvedení triggeru */
-- aktualizace hodnoty v tabulce Platba
UPDATE Platba
SET castka = 50
WHERE ID_platba=1;
-- odstranění záznamu z tabulky Platba
DELETE FROM Platba
WHERE ID_platba = 2;
-- záznamy o aktualizaci a odstranění byly vloženy do tabulky Zmeny_castek_plateb
SELECT * FROM Zmeny_castek_plateb;


/* Trigger při vložení nového záznamu do tabulky Rezervace zkontroluje, zda je  *
 *  datum rezervace dnešní/budoucí. Pokud ne, je vyvolána výjimka.              */
-- vytvoření triggeru
CREATE OR REPLACE TRIGGER Kontrola_casu_rezervace
AFTER INSERT ON Rezervace
FOR EACH ROW
DECLARE
    NEPLATNE_DATUM EXCEPTION;
BEGIN
    -- kontrola, zda je datum minulé
    IF :NEW.datum_rezervace < CURRENT_DATE THEN
        RAISE NEPLATNE_DATUM;
    END IF;
EXCEPTION
    WHEN NEPLATNE_DATUM THEN
        RAISE_APPLICATION_ERROR(-20111, 'Neplatné datum rezervace (' 
                        || TO_CHAR(:NEW.datum_rezervace, 'DD.MM.YYYY') || ').');
END;
/

/* Předvedení triggeru */
-- trigger nevyvolá výjimku - datum je v pořádku (není minulé)
INSERT INTO Rezervace (ID_zamestnanec, ID_zakaznik, datum_rezervace)
VALUES (1, 1, TO_DATE('01.07.2022', 'DD.MM.YYYY'));
-- trigger vyvolá výjimku - zadané datum již bylo v minulosti
INSERT INTO Rezervace (ID_zamestnanec, ID_zakaznik, datum_rezervace, cas_rezervace)
VALUES (1, 1, TO_DATE('01.01.2020', 'DD.MM.YYYY'), DEFAULT);


/* ************************************** PRÁVA *************************************** */
-- udělení práv na práci s tabulkami
GRANT ALL ON Mistnost TO xkuzni04;
GRANT ALL ON Stul TO xkuzni04;
GRANT ALL ON Zakaznik TO xkuzni04;
GRANT ALL ON Pozice TO xkuzni04;
GRANT ALL ON Zamestnanec TO xkuzni04;
GRANT ALL ON Telefon TO xkuzni04;
GRANT ALL ON Ingredience TO xkuzni04;
GRANT ALL ON Alergen TO xkuzni04;
GRANT ALL ON Ingredience_obsahuje_alergen TO xkuzni04;
GRANT ALL ON Pokrm_napoj TO xkuzni04;
GRANT ALL ON Ingredience_obsahuje_alergen TO xkuzni04;
GRANT ALL ON Pokrm_napoj TO xkuzni04;
GRANT ALL ON Ingredience_v_pokrmu_napoji TO xkuzni04;
GRANT ALL ON Rezervace TO xkuzni04;
GRANT ALL ON Rezervace_stolu TO xkuzni04;
GRANT ALL ON Objednavka TO xkuzni04;
GRANT ALL ON Objednavka_obsahuje_pokrm_napoj TO xkuzni04;
GRANT ALL ON Platba TO xkuzni04;

-- přidělení práv na procedury
GRANT EXECUTE ON Uctenka TO xkuzni04;
GRANT EXECUTE ON Vykonnost_zamestnance TO xkuzni04;


/* ******************************* MATERIALIZOVANÝ POHLED ***************************** */
DROP MATERIALIZED VIEW Jidelni_listek;

-- vytvoření materializovaného pohledu
CREATE MATERIALIZED VIEW Jidelni_listek
REFRESH ON COMMIT 
AS
    SELECT nazev, cena 
    FROM Pokrm_napoj;

-- přidělení práv uživateli xkuzni04
GRANT ALL ON Jidelni_listek TO xkuzni04;

/* Ukázka funkce pohledu */
-- původni stav
SELECT * FROM Jidelni_listek;
-- přidání položky
INSERT INTO Pokrm_napoj (nazev, doba_pripravy, cena)
VALUES ('Burger s trhaným vepřovým masem v BBQ omáčce', '20 minut', 180);
-- zobrazení pohledu před příkazem COMMIT a po něm (pohled je aktualizován)
SELECT * FROM Jidelni_listek;
COMMIT;
SELECT * FROM Jidelni_listek;



/* ******************************* EXPLAIN PLAN + INDEX *****************************/
-- Zahození optimalizačního indexu
DROP INDEX id_zam  ON Objednavka(ID_zamestnanec);

-- Vytvoř plán pro zobrazení dotazu
EXPLAIN PLAN FOR
    -- zobrazi pocet objednávek zamestnanců, kteří udělali více než jednu objednávku
    SELECT COUNT(*) pocet_objednavek, jmeno, prijmeni, ID_zamestnanec
    FROM Objednavka O NATURAL JOIN Zamestnanec ZA
    GROUP BY ID_zamestnanec, jmeno, prijmeni, ID_zamestnanec;
    HAVING COUNT(*) > 1
    ORDER BY jmeno;) > 1;
-- zobrazi Plánovací tabulku před optimalizací
SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);

-- Vytvoření indexu pro optimalizaci
CREATE INDEX id_zam  ON Objednavka(ID_zamestnanec);

-- druhy pokus
EXPLAIN PLAN FOR
    -- zobrazi pocet objednávek zamestnanců, kteří udělali více než jednu objednávku
    SELECT COUNT(*) pocet_objednavek, jmeno, prijmeni, ID_zamestnanec
    FROM Objednavka O NATURAL JOIN Zamestnanec ZA
    GROUP BY ID_zamestnanec, jmeno, prijmeni, ID_zamestnanec;
    HAVING COUNT(*) > 1
    ORDER BY jmeno;

-- zobrazi Plánovací tabulku optimalizovanou pomocí indexu
SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);



